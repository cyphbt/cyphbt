<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cyp&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on cyp&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Aug 2025 15:00:02 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Myfirst Blog</title>
      <link>http://localhost:1313/posts/go/myfirst-blog/</link>
      <pubDate>Mon, 11 Aug 2025 15:00:02 +0800</pubDate>
      <guid>http://localhost:1313/posts/go/myfirst-blog/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;This is &lt;strong&gt;bold&lt;/strong&gt; text, and this is &lt;em&gt;emphasized&lt;/em&gt; text.&lt;/p&gt;&#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; website!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go singleflight 源码分析    </title>
      <link>http://localhost:1313/posts/go/ai%E5%AF%B9%E8%AF%9D-singleflight%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 07 Aug 2025 17:40:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/go/ai%E5%AF%B9%E8%AF%9D-singleflight%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h1 id=&#34;go-singleflight-源码分析&#34;&gt;Go singleflight 源码分析&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Exported on 8/7/2025 at 17:36:54 GMT+8 from Cursor (1.3.9)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;这是什么原因&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Cursor&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;我需要查看当前打开的文件内容以及相关的错误信息来帮助您诊断问题。让我先检查一下您当前正在查看的文件。&lt;/p&gt;&#xA;&lt;p&gt;我看到您的光标在第73行，这是一个panic错误处理的位置。让我检查一下是否有任何编译错误或运行时错误信息。&lt;/p&gt;&#xA;&lt;p&gt;让我检查一下项目的构建状态和可能的错误：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;翻一下&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Cursor&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;我看到您在查看 &lt;code&gt;singleflight&lt;/code&gt; 包的代码。让我帮您翻译一下您选中的这段注释：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Do executes and returns the results of the given function, making&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// sure that only one execution is in-flight for a given key at a&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// time. If a duplicate comes in, the duplicate caller waits for the&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// original to complete and receives the same results.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The return value shared indicates whether v was given to multiple callers.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;中文翻译：&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 内存分配、逃逸分析与优化机制详解</title>
      <link>http://localhost:1313/posts/go/go%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 27 Apr 2025 16:05:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/go/go%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;go-内存分配逃逸分析与优化机制详解&#34;&gt;Go 内存分配、逃逸分析与优化机制详解&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-interface-的类型断言与底层实现&#34;&gt;1. interface{} 的类型断言与底层实现&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-类型断言的语法和用途&#34;&gt;1.1 类型断言的语法和用途&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;input.(type)&lt;/code&gt; 只能用于 type switch 语句中，用于判断 interface{} 变量的实际类型，并做类型分支处理。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;例如：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{} = &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.(&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// v 是 int 类型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// v 是 string 类型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-interface-的底层结构&#34;&gt;1.2 interface{} 的底层结构&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;interface{} 在 Go 底层实现为一个结构体，包含两个指针：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;_type&lt;/code&gt;：指向类型元数据（类型描述信息）&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;data&lt;/code&gt;：指向实际数据的指针&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eface&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;_type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_type&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;13-类型断言的底层实现&#34;&gt;1.3 类型断言的底层实现&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当你写 &lt;code&gt;input.(type)&lt;/code&gt; 或 &lt;code&gt;input.(SomeType)&lt;/code&gt; 时，Go 运行时会：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;读取 interface{} 变量的 &lt;code&gt;_type&lt;/code&gt; 指针。&lt;/li&gt;&#xA;&lt;li&gt;将其与 case 分支中的类型元数据做比较。&lt;/li&gt;&#xA;&lt;li&gt;匹配则进入对应分支，并将 data 指针转换为目标类型。&lt;/li&gt;&#xA;&lt;li&gt;不匹配则继续下一个 case。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;相关源码在 Go 的 runtime 包（如 &lt;code&gt;iface.go&lt;/code&gt;）中，类型断言的核心函数有 &lt;code&gt;runtime.assertE2I&lt;/code&gt;、&lt;code&gt;runtime.assertE2T&lt;/code&gt; 等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;14-性能影响&#34;&gt;1.4 性能影响&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;类型断言的性能损耗极小，通常只涉及指针比较和类型表查找。&lt;/li&gt;&#xA;&lt;li&gt;只有在极端高频调用下才可能成为瓶颈，绝大多数业务场景可以放心使用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-interface-数据的存储位置&#34;&gt;2. interface{} 数据的存储位置&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-interface-变量本身&#34;&gt;2.1 interface{} 变量本身&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;interface{} 变量本身（即 eface 结构体）通常分配在栈上。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;22-interface-指向的数据&#34;&gt;2.2 interface{} 指向的数据&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;interface{} 指向的数据，可能分配在栈上，也可能分配在堆上，&lt;strong&gt;由逃逸分析决定&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;逃逸分析会根据变量的生命周期和使用方式，自动决定分配位置。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;23-影响逃逸的常见场景&#34;&gt;2.3 影响逃逸的常见场景&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果 interface{} 指向的数据只在当前函数内使用，且没有被返回或跨 goroutine 传递，通常会分配在栈上。&lt;/li&gt;&#xA;&lt;li&gt;如果 interface{} 指向的数据被返回、传递到其他 goroutine、或生命周期不明确，则会分配到堆上。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;3-逃逸分析与分配规则&#34;&gt;3. 逃逸分析与分配规则&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-逃逸分析的作用&#34;&gt;3.1 逃逸分析的作用&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Go 编译器通过逃逸分析（escape analysis）判断变量是否需要分配到堆上。&lt;/li&gt;&#xA;&lt;li&gt;逃逸分析的目标是尽量减少堆分配，提高程序性能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;32-逃逸分析的常见规则&#34;&gt;3.2 逃逸分析的常见规则&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;struct 返回值&lt;/strong&gt;：大概率逃逸到堆上，尤其是大 struct 或返回指针时，但有优化空间（如返回值优化）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;普通类型返回值&lt;/strong&gt;：如 int、float、bool 等，通常分配在栈上，除非返回的是指针。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;interface{} 返回值&lt;/strong&gt;：即使是普通类型，也可能逃逸到堆上，因为 interface{} 需要存储类型信息和数据指针，编译器有时会保守处理。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;33-逃逸分析的命令&#34;&gt;3.3 逃逸分析的命令&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;你可以用如下命令查看逃逸分析结果：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cyp&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on cyp&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Aug 2025 17:22:26 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AI对话-gitignore用法</title>
      <link>http://localhost:1313/posts/other/ai%E5%AF%B9%E8%AF%9D-gitignore%E7%94%A8%E6%B3%95/</link>
      <pubDate>Mon, 11 Aug 2025 17:22:26 +0800</pubDate>
      <guid>http://localhost:1313/posts/other/ai%E5%AF%B9%E8%AF%9D-gitignore%E7%94%A8%E6%B3%95/</guid>
      <description>&lt;h3 id=&#34;git-忽略-confconfini-未生效问题排查与修复指引&#34;&gt;Git 忽略 &lt;code&gt;conf/conf.ini&lt;/code&gt; 未生效问题排查与修复指引&lt;/h3&gt;&#xA;&lt;h4 id=&#34;背景症状&#34;&gt;背景/症状&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你在 &lt;code&gt;.gitignore&lt;/code&gt; 中已添加了 &lt;code&gt;conf/conf.ini&lt;/code&gt; 的忽略规则，但 &lt;code&gt;git status&lt;/code&gt; 仍显示该文件有变更。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;根因&#34;&gt;根因&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt; 只对“未被跟踪”的文件生效。&lt;code&gt;conf/conf.ini&lt;/code&gt; 之前已经被提交（被 Git 索引跟踪），因此忽略规则对它不起作用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;快速诊断&#34;&gt;快速诊断&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查看 &lt;code&gt;.gitignore&lt;/code&gt; 中确有规则（多处重复无碍但冗余）&lt;/li&gt;&#xA;&lt;li&gt;确认文件已被跟踪：&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;git ls-files conf/conf.ini&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;若输出包含 `conf/conf.ini`，说明该文件已被跟踪。&#xA;- 当前状态：&#xA;```bash&#xA;git status --porcelain&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;会看到该文件被标记为修改（如 &lt;code&gt;M conf/conf.ini&lt;/code&gt;）。&lt;/p&gt;&#xA;&lt;h4 id=&#34;解决步骤&#34;&gt;解决步骤&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;从 Git 索引中移除该文件，但保留本地文件：&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;git rm &amp;ndash;cached conf/conf.ini&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2. 之后 `.gitignore` 的忽略规则将开始生效。&#xA;&#xA;#### 验证&#xA;- 再次查看状态：&#xA;```bash&#xA;git status&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;会看到 &lt;code&gt;deleted: conf/conf.ini&lt;/code&gt; 作为待提交变更（这表示从版本库删除，但不会删除你本地工作区文件）。&lt;/p&gt;&#xA;&lt;h4 id=&#34;提交变更可选但推荐&#34;&gt;提交变更（可选，但推荐）&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提交索引移除操作，让团队成员也不再跟踪该文件：&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;git commit -m &amp;ldquo;chore: stop tracking conf/conf.ini and respect .gitignore&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>AI对话-边车模式和服务网格</title>
      <link>http://localhost:1313/posts/other/ai%E5%AF%B9%E8%AF%9D-%E8%BE%B9%E8%BD%A6%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/</link>
      <pubDate>Mon, 11 Aug 2025 16:41:26 +0800</pubDate>
      <guid>http://localhost:1313/posts/other/ai%E5%AF%B9%E8%AF%9D-%E8%BE%B9%E8%BD%A6%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/</guid>
      <description>&lt;h3 id=&#34;服务网格和边车模式什么意思&#34;&gt;服务网格和边车模式什么意思？&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;边车模式（Sidecar Pattern）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将日志、流量控制、服务注册、熔断限流等“控制类”能力，从业务进程中剥离到独立的边车进程/容器，与主服务同生命周期运行。&lt;/li&gt;&#xA;&lt;li&gt;好处：业务与控制解耦，主服务只写业务逻辑。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;服务网格（Service Mesh）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在大规模微服务中，为每个服务配一个边车代理，所有边车组成网状网络。&lt;/li&gt;&#xA;&lt;li&gt;数据平面：各个 sidecar 处理转发、限流、熔断、TLS、可观测性等。&lt;/li&gt;&#xA;&lt;li&gt;控制平面：集中下发策略与配置，统一路由、限流、流量治理等。&lt;/li&gt;&#xA;&lt;li&gt;对应用零侵入，开发只写业务。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;一句话：边车模式是“给每个服务配助手”，服务网格是“让所有助手组成智能网络”。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;在-go-后端服务里边车模式怎么和业务代码工作需要开放统一端口吗&#34;&gt;在 Go 后端服务里，边车模式怎么和业务代码工作？需要开放统一端口吗？&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;典型方式：主服务监听本地端口（如 &lt;code&gt;:8080&lt;/code&gt;），sidecar 作为反向代理监听对外端口（如 &lt;code&gt;:8081&lt;/code&gt;），两者通过 &lt;code&gt;localhost&lt;/code&gt; 通信。&lt;/li&gt;&#xA;&lt;li&gt;Go 主服务仅需像平时一样启动 HTTP 服务，不需要关心认证、限流、日志等控制逻辑。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;示例（主服务，仅处理业务）：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewServeMux&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ping&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;([]byte(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app listening on :8080&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;示例（sidecar，反向代理到主服务）：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http/httputil&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/url&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://127.0.0.1:8080&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;httputil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewSingleHostReverseProxy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8081&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;在 Kubernetes 中，二者位于同一 Pod，共享网络命名空间，sidecar 直接转发到 &lt;code&gt;127.0.0.1:8080&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;使用服务网格（如 Istio）时，Envoy 会自动作为 sidecar 注入并接管流量，Go 服务只需监听本地端口。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;8080-是跟-sidecar-约定的吗如果没有约定端口sidecar-怎么跟-go-服务通信&#34;&gt;8080 是跟 sidecar 约定的吗？如果没有约定端口，sidecar 怎么跟 Go 服务通信？&lt;/h3&gt;&#xA;&lt;p&gt;不是“天然约定”，而是部署时显式声明。常见方式：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Myfirst Blog</title>
      <link>http://localhost:1313/posts/go/myfirst-blog/</link>
      <pubDate>Mon, 11 Aug 2025 15:00:02 +0800</pubDate>
      <guid>http://localhost:1313/posts/go/myfirst-blog/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;This is &lt;strong&gt;bold&lt;/strong&gt; text, and this is &lt;em&gt;emphasized&lt;/em&gt; text.&lt;/p&gt;&#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; website!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go singleflight 源码分析    </title>
      <link>http://localhost:1313/posts/go/ai%E5%AF%B9%E8%AF%9D-singleflight%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 07 Aug 2025 17:40:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/go/ai%E5%AF%B9%E8%AF%9D-singleflight%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;这是什么原因&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Cursor&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;我需要查看当前打开的文件内容以及相关的错误信息来帮助您诊断问题。让我先检查一下您当前正在查看的文件。&lt;/p&gt;&#xA;&lt;p&gt;我看到您的光标在第73行，这是一个panic错误处理的位置。让我检查一下是否有任何编译错误或运行时错误信息。&lt;/p&gt;&#xA;&lt;p&gt;让我检查一下项目的构建状态和可能的错误：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;翻一下&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Cursor&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;我看到您在查看 &lt;code&gt;singleflight&lt;/code&gt; 包的代码。让我帮您翻译一下您选中的这段注释：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Do executes and returns the results of the given function, making&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// sure that only one execution is in-flight for a given key at a&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// time. If a duplicate comes in, the duplicate caller waits for the&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// original to complete and receives the same results.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The return value shared indicates whether v was given to multiple callers.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;中文翻译：&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 内存分配、逃逸分析与优化机制详解</title>
      <link>http://localhost:1313/posts/go/go%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 27 Apr 2025 16:05:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/go/go%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-interface-的类型断言与底层实现&#34;&gt;1. interface{} 的类型断言与底层实现&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-类型断言的语法和用途&#34;&gt;1.1 类型断言的语法和用途&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;input.(type)&lt;/code&gt; 只能用于 type switch 语句中，用于判断 interface{} 变量的实际类型，并做类型分支处理。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;例如：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{} = &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.(&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// v 是 int 类型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// v 是 string 类型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-interface-的底层结构&#34;&gt;1.2 interface{} 的底层结构&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;interface{} 在 Go 底层实现为一个结构体，包含两个指针：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;_type&lt;/code&gt;：指向类型元数据（类型描述信息）&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;data&lt;/code&gt;：指向实际数据的指针&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eface&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;_type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_type&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;13-类型断言的底层实现&#34;&gt;1.3 类型断言的底层实现&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当你写 &lt;code&gt;input.(type)&lt;/code&gt; 或 &lt;code&gt;input.(SomeType)&lt;/code&gt; 时，Go 运行时会：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;读取 interface{} 变量的 &lt;code&gt;_type&lt;/code&gt; 指针。&lt;/li&gt;&#xA;&lt;li&gt;将其与 case 分支中的类型元数据做比较。&lt;/li&gt;&#xA;&lt;li&gt;匹配则进入对应分支，并将 data 指针转换为目标类型。&lt;/li&gt;&#xA;&lt;li&gt;不匹配则继续下一个 case。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;相关源码在 Go 的 runtime 包（如 &lt;code&gt;iface.go&lt;/code&gt;）中，类型断言的核心函数有 &lt;code&gt;runtime.assertE2I&lt;/code&gt;、&lt;code&gt;runtime.assertE2T&lt;/code&gt; 等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;14-性能影响&#34;&gt;1.4 性能影响&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;类型断言的性能损耗极小，通常只涉及指针比较和类型表查找。&lt;/li&gt;&#xA;&lt;li&gt;只有在极端高频调用下才可能成为瓶颈，绝大多数业务场景可以放心使用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-interface-数据的存储位置&#34;&gt;2. interface{} 数据的存储位置&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-interface-变量本身&#34;&gt;2.1 interface{} 变量本身&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;interface{} 变量本身（即 eface 结构体）通常分配在栈上。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;22-interface-指向的数据&#34;&gt;2.2 interface{} 指向的数据&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;interface{} 指向的数据，可能分配在栈上，也可能分配在堆上，&lt;strong&gt;由逃逸分析决定&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;逃逸分析会根据变量的生命周期和使用方式，自动决定分配位置。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;23-影响逃逸的常见场景&#34;&gt;2.3 影响逃逸的常见场景&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果 interface{} 指向的数据只在当前函数内使用，且没有被返回或跨 goroutine 传递，通常会分配在栈上。&lt;/li&gt;&#xA;&lt;li&gt;如果 interface{} 指向的数据被返回、传递到其他 goroutine、或生命周期不明确，则会分配到堆上。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;3-逃逸分析与分配规则&#34;&gt;3. 逃逸分析与分配规则&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-逃逸分析的作用&#34;&gt;3.1 逃逸分析的作用&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Go 编译器通过逃逸分析（escape analysis）判断变量是否需要分配到堆上。&lt;/li&gt;&#xA;&lt;li&gt;逃逸分析的目标是尽量减少堆分配，提高程序性能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;32-逃逸分析的常见规则&#34;&gt;3.2 逃逸分析的常见规则&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;struct 返回值&lt;/strong&gt;：大概率逃逸到堆上，尤其是大 struct 或返回指针时，但有优化空间（如返回值优化）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;普通类型返回值&lt;/strong&gt;：如 int、float、bool 等，通常分配在栈上，除非返回的是指针。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;interface{} 返回值&lt;/strong&gt;：即使是普通类型，也可能逃逸到堆上，因为 interface{} 需要存储类型信息和数据指针，编译器有时会保守处理。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;33-逃逸分析的命令&#34;&gt;3.3 逃逸分析的命令&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;你可以用如下命令查看逃逸分析结果：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
